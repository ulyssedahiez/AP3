<html><head>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->
<title>Programmation en C -  6.2. do - while</title><link rel="Stylesheet" href="./site.css" type="text/css"></head>
<body>
<a href="prg-c54.htm"><img src="./leftg.gif" alt="Previous " border="0" width="30" height="30"></a>
 <a href="prg-c56.htm"><img src="./rightg.gif" alt="Next " border="0" width="30" height="30"></a>
 <a href="prg-c53.htm"><img src="./upg.gif" alt="Up " border="0" width="30" height="30"></a>
 <a href="prg-c.htm"><img src="./topg.gif" alt="Index " border="0" width="30" height="30"></a>
 <a href="prg-c_c.htm"><img src="./contg.gif" alt="Contents " border="0" width="30" height="30"></a>
<hr size="1" width="100%">
<h2>
 6.2. do - while</h2>
<b>	</b>	 <p>
 <p>
La structure <b>do - while</b> est semblable &agrave; la structure
<b>while</b>, avec la diff&eacute;rence suivante :<p>
*
<b>while</b> &eacute;value la condition <b><i>avant</i></b> d'ex&eacute;cuter
le bloc d'instructions, <p>
*
<b>do - while</b> &eacute;value la condition <b><i>apr&egrave;s</i></b> avoir
ex&eacute;cut&eacute; le bloc d'instructions. Ainsi le bloc d'instructions est
ex&eacute;cut&eacute; au moins une fois.<p>
<p>
<b><i>La structure do - while en C</i></b>


<pre><b>   do
         &lt;bloc d'instructions&gt;
   while ( &lt;expression&gt; );</b></pre>
 <p>
 <i>	Le &lt;bloc d'instructions&gt; est ex&eacute;cut&eacute; au moins
une fois <br>et aussi longtemps que l'&lt;expression&gt; fournit une valeur
diff&eacute;rente de z&eacute;ro. </i><p>
 
<p>
En pratique, la structure <b>do - while</b> n'est pas si fr&eacute;quente que
<b>while</b>; mais dans certains cas, elle fournit une solution plus
&eacute;l&eacute;gante. Une application typique de <b>do</b> - <b>while</b> est
la saisie de donn&eacute;es qui doivent remplir une certaine condition:<p>
<p>
<b><i>Exemple 1</i></b>

<pre><b>float N;
do 
   {
    printf(&quot;Introduisez un nombre entre 1 et 10 :&quot;);
    scanf(&quot;%f&quot;, &amp;N);
   }
while (N&lt;1 || N&gt;10);</b></pre>
<p>
<b><i>Exemple 2</i></b>

<pre><b>int n, div;
printf(&quot;Entrez le nombre &agrave; diviser : &quot;);
scanf(&quot;%i&quot;, &amp;n);
do
   {
    printf(&quot;Entrez le diviseur ( 0) : &quot;);
    scanf(&quot;%i&quot;, &amp;div);
   }
while (!div);
printf(&quot;%i / %i = %f\n&quot;, n, div, (float)n/div);</b></pre>
<p>
<img src="attenti2.gif" alt="Attention!" align="right" width="18" height="67"><p>
<b>do - while</b> est comparable &agrave; la structure
<u>r&eacute;p&eacute;ter</u> du langage algorithmique (<b>repeat until</b> en
Pascal) <i>si la condition finale est invers&eacute;e logiquement</i>.<p>
<p>
<b><i>Exemple 3</i></b><p>
Le programme de calcul de la racine carr&eacute;e :

<pre><u>programme</u> RACINE_CARREE
   <u>r&eacute;el</u> N
   <u>r&eacute;p&eacute;ter</u> 
       <u>&eacute;crire</u> &quot;Entrer un nombre (&gt;=0) : &quot;
       <u>lire</u> N
   <u>jusqu'&agrave;</u> <i>(N &gt;= 0)</i>
   <u>&eacute;crire</u> &quot;La racine carr&eacute;e de &quot;,N ,&quot;vaut &quot;, <img src="racine.gif">N
<u>fprogramme</u> (* fin RACINE_CARRE *)</pre>
<p>
se traduit en C par :

<pre><b>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
main()
{
 float N;
 do 
   {
    printf(&quot;Entrer un nombre (&gt;= 0) : &quot;);
    scanf(&quot;%f&quot;, &amp;N);
   }
 while (N &lt; 0); 
 printf(&quot;La racine carr&eacute;e de %.2f est %.2f\n&quot;, N, sqrt(N));
 return 0;
}
</b></pre>
<p><hr size="1" width="100%">
<a href="prg-c54.htm"><img src="./leftg.gif" alt="Previous " border="0" width="30" height="30"></a>
 <a href="prg-c56.htm"><img src="./rightg.gif" alt="Next " border="0" width="30" height="30"></a>
 <a href="prg-c53.htm"><img src="./upg.gif" alt="Up " border="0" width="30" height="30"></a>
 <a href="prg-c.htm"><img src="./topg.gif" alt="Index " border="0" width="30" height="30"></a>
 <a href="prg-c_c.htm"><img src="./contg.gif" alt="Contents " border="0" width="30" height="30"></a>
<br><hr size="1" width="100%"><small><a href="prg-c04.htm">Feedback - Copyright &copy</a> 1993,1996,1997 <a href="prg-c02.htm">F.Faber</a></small><p></body></html>