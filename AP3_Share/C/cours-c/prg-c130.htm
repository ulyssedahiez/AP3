<html><head>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->
<title>Programmation en C -   d)  Tris de tableaux</title><link rel="Stylesheet" href="./site.css" type="text/css"></head>
<body>
<a href="prg-c129.htm"><img src="./leftg.gif" alt="Previous " border="0" width="30" height="30"></a>
 <a href="prg-c131.htm"><img src="./rightg.gif" alt="Next " border="0" width="30" height="30"></a>
 <a href="prg-c126.htm"><img src="./upg.gif" alt="Up " border="0" width="30" height="30"></a>
 <a href="prg-c.htm"><img src="./topg.gif" alt="Index " border="0" width="30" height="30"></a>
 <a href="prg-c_c.htm"><img src="./contg.gif" alt="Contents " border="0" width="30" height="30"></a>
<hr size="1" width="100%">
<h3>
  d)  Tris de tableaux</h3>
<ul>
<li><a href="#Heading276">Exercice 10.17  Tri de Shell</a>
<li><a href="#Heading277">Exercice 10.18</a>
<li><a href="#Heading278">Exercice 10.19  Tri par s&eacute;lection</a>
<li><a href="#Heading279">Exercice 10.20</a>
<li><a href="#Heading280">Exercice 10.21  Tri par insertion</a>
<li><a href="#Heading281">Exercice 10.22</a>
<li><a href="#Heading282">Exercice 10.23  Tri par propagation</a>
<li><a href="#Heading283">Exercice 10.24  Fusion de tableaux tri&eacute;s</a>
</ul>
<hr size="1" width="100%">
 <p>
 
<h4><hr size="2">
<a name="Heading276">Exercice 10.17  Tri de Shell</a>
<hr size="1"></h4>
<p>
<p>
Traduire la fonction TRI_SHELL d&eacute;finie ci-dessous en C. Utiliser la
fonction PERMUTER d&eacute;finie dans le cours. <p>
<p>
Ecrire un programme profitant des fonctions d&eacute;finies dans les exercices
pr&eacute;c&eacute;dents pour tester la fonction TRI_SHELL.<p>


<pre>   <u>proc&eacute;dure</u> TRI_SHELL(T,N)
   |  (* Trie un tableau T d'ordre N par la m&eacute;thode
   |     de Shell en ordre croissant. *)
   |  <u>r&eacute;sultat</u>: <u>entier tableau</u> T[100]
   |  <u>donn&eacute;e</u>: <u>entier</u> N
   |  <u>entier</u> SAUT, M, K
   |  <u>bool&eacute;en</u> TERMINE
   |  <u>en</u> SAUT <u>ranger</u> N
   |  <u>tant que</u> (SAUT&gt;1) <u>faire</u>
   |  |  <u>en</u> SAUT <u>ranger</u> SAUT <u>divent</u> 2
   |  |  <u>r&eacute;p&eacute;ter</u>
   |  |  |  <u>en</u> TERMINE <u>ranger</u> <u>vrai</u>
   |  |  |  <u>pour</u> M <u>variant</u> <u>de</u> 1 <u>&agrave;</u> N-SAUT <u>faire</u>
   |  |  |  |  <u>en</u> K <u>ranger</u> M+SAUT
   |  |  |  |  <u>si</u> (T[M]&gt;T[K]) <u>alors</u> 
   |  |  |  |  |   PERMUTER(T[M],T[K])
   |  |  |  |  |   <u>en</u> TERMINE <u>ranger</u> <u>faux</u>
   |  |  |  |  <u>fsi</u>
   |  |  |  <u>fpour</u>
   |  |  <u>jusqu'&agrave;</u> TERMINE
   |  <u>ftant</u> (* SAUT &lt;= 1 *)
   <u>fproc&eacute;dure</u> (* fin TRI_SHELL *)</pre>
<p>
<b>Remarque:</b> L'algorithme a &eacute;t&eacute; d&eacute;velopp&eacute; par
D.L.Shell en 1959. En comparant d'abord des &eacute;l&eacute;ments tr&egrave;s
&eacute;loign&eacute;s, l'algorithme a tendance &agrave; &eacute;liminer
rapidement les grandes perturbations dans l'ordre des &eacute;l&eacute;ments.
La distance entre les &eacute;l&eacute;ments qui sont compar&eacute;s est peu
&agrave; peu r&eacute;duite jusqu'&agrave; 1. A la fin du tri, les
&eacute;l&eacute;ments voisins sont arrang&eacute;s.<p>
<p>

<h4><hr size="2">
<a name="Heading277">Exercice 10.18</a>
<hr size="1"></h4>
<p>
<p>
D&eacute;terminer le maximum de N &eacute;l&eacute;ments d'un tableau TAB
d'entiers<b> </b>de trois fa&ccedil;ons diff&eacute;rentes:<p>
<p>
	<b>a)</b>	la fonction MAX1 retourne la valeur maximale<p>
	<b>b)</b>	la fonction MAX2 retourne l'indice de l'&eacute;l&eacute;ment
maximal<p>
	<b>c)</b>	la fonction MAX3 retourne l'adresse de l'&eacute;l&eacute;ment
maximal<p>
<p>
Ecrire un programme pour tester les trois fonctions.<p>
<p>

<h4><hr size="2">
<a name="Heading278">Exercice 10.19  Tri par s&eacute;lection</a>
<hr size="1"></h4>
<p>
<p>
Ecrire la fonction TRI_SELECTION qui trie un tableau de N entiers par la
m&eacute;thode de s&eacute;lection directe du maximum (voir exercice 7.14). La
fonction fera appel &agrave; la fonction PERMUTER (d&eacute;finie dans le
cours) et &agrave; la fonction MAX3 (d&eacute;finie dans l'exercice
pr&eacute;c&eacute;dent). <p>
Ecrire un programme pour tester la fonction TRI_SELECTION.<p>
<p>

<h4><hr size="2">
<a name="Heading279">Exercice 10.20</a>
<hr size="1"></h4>
<p>
<p>
Ecrire la fonction INSERER qui place un &eacute;l&eacute;ment X &agrave;
l'int&eacute;rieur d'un tableau qui contient N &eacute;l&eacute;ments
tri&eacute;s par ordre croissant, de fa&ccedil;on &agrave; obtenir un tableau
&agrave; N+1 &eacute;l&eacute;ments tri&eacute;s par ordre croissant. La
dimension du tableau est incr&eacute;ment&eacute;e dans la fonction INSERER.<p>
<p>
Ecrire un programme profitant des fonctions d&eacute;finies plus haut pour
tester la fonction INSERER.<p>
<p>

<h4><hr size="2">
<a name="Heading280">Exercice 10.21  Tri par insertion</a>
<hr size="1"></h4>
<p>
<p>
Ecrire la fonction TRI_INSERTION qui utilise la fonction INSERER pour trier par
ordre croissant les &eacute;l&eacute;ments d'un tableau &agrave; N
&eacute;l&eacute;ments. <p>
Ecrire un programme pour tester la fonction TRI_INSERTION.<p>
<p>
<b>M&eacute;thode: </b>Trier le tableau de gauche &agrave; droite en
ins&eacute;rant &agrave; chaque fois l'&eacute;l&eacute;ment I+1 dans le
tableau (d&eacute;j&agrave; tri&eacute;) des I premiers
&eacute;l&eacute;ments.<p>
<tt>
<img src="prg-c72.gif" width="366" height="283"></tt><p>
<p>

<h4><hr size="2">
<a name="Heading281">Exercice 10.22</a>
<hr size="1"></h4>
<p>
<p>
<center>Ecrire la fonction RANGER qui arrange le contenu de ses deux
param&egrave;tres X et Y de fa&ccedil;on &agrave; ce que le contenu de X soit
plus petit que celui de Y. RANGER retourne la valeur logique 1 si un
&eacute;change a eu lieu, sinon 0.<p>
</center><p>

<h4><hr size="2">
<a name="Heading282">Exercice 10.23  Tri par propagation</a>
<hr size="1"></h4>
<p>
<p>
Ecrire la fonction TRI_BULLE qui trie un tableau de N &eacute;l&eacute;ments
entiers par ordre croissant en appliquant la m&eacute;thode de la bulle (tri
par propagation - voir exercice 7.15). Employer la fonction RANGER de
l'exercice ci-dessus.<p>
<p>
Ecrire un programme pour tester la fonction TRI_BULLE.<p>
<p>

<h4><hr size="2">
<a name="Heading283">Exercice 10.24  Fusion de tableaux tri&eacute;s</a>
<hr size="1"></h4>
<p>
<p>
Ecrire la fonction FUSION qui construit un tableau FUS tri&eacute; par ordre
croissant avec les &eacute;l&eacute;ments de deux tableaux A et B tri&eacute;s
par ordre croissant. Pour deux tableaux de dimensions N et M, le tableau FUS
aura la dimension N+M. (M&eacute;thode: voir exercice 7.13)<p>
<p>
Ecrire un programme qui teste la fonction FUSION &agrave; l'aide de deux
tableaux lus au clavier et tri&eacute;s &agrave; l'aide de TRI_BULLE.<p>
<p>
<p>
<p>
<p><hr size="1" width="100%">
<a href="prg-c129.htm"><img src="./leftg.gif" alt="Previous " border="0" width="30" height="30"></a>
 <a href="prg-c131.htm"><img src="./rightg.gif" alt="Next " border="0" width="30" height="30"></a>
 <a href="prg-c126.htm"><img src="./upg.gif" alt="Up " border="0" width="30" height="30"></a>
 <a href="prg-c.htm"><img src="./topg.gif" alt="Index " border="0" width="30" height="30"></a>
 <a href="prg-c_c.htm"><img src="./contg.gif" alt="Contents " border="0" width="30" height="30"></a>
<br><hr size="1" width="100%"><small><a href="prg-c04.htm">Feedback - Copyright &copy</a> 1993,1996,1997 <a href="prg-c02.htm">F.Faber</a></small><p></body></html>